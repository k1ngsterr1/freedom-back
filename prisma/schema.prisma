// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  HR
  User
}

model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  username    String
  password    String
  role        Role         @default(User)
  mbti        String?
  applications Application[]
  vacancies      Vacancy[]
  sentMessages   Chat[]    @relation("Sender")
  receivedMessages Chat[]  @relation("Recipient")
}


model Application {
  id                  Int                @id @default(autoincrement())
  userId              Int?
  user                User?              @relation(fields: [userId], references: [id])
  hard_skills         String[]           @default([]) // Initialize with an empty array by default
  soft_skills         String[]           @default([])
  work_experience     String[]           @default([])
  formatOfWork        String?
  employmentType      String?
  experience          Float?
  salary              Int[]              @default([])
  position            String?
  location            String?
  additional          String[]           @default([])
  summary             String?
  contacts            String[]           @default([])
  evaluation          Float?
  applicationVacancies ApplicationVacancy[]
}


model Vacancy {
  id              Int                @id @default(autoincrement())
  userId              Int
  user                User               @relation(fields: [userId], references: [id])
  title           String?
  description     String?
  hard_skills     String[] @default([])
  soft_skills     String[] @default([])
  formatOfWork    String[] @default([])    
  employmentType  String?            
  salary          Int[] @default([])
  task            String?
  requirements    String[] @default([])
  location        String?
  additional      String[] @default([])         
  contacts        String[] @default([])
  created_at      String?
  applicationVacancies ApplicationVacancy[]
}

model ApplicationVacancy {
  applicationId Int
  vacancyId     Int
  match         Float?

  application   Application         @relation(fields: [applicationId], references: [id])
  vacancy       Vacancy             @relation(fields: [vacancyId], references: [id])

  @@id([applicationId, vacancyId])  
}

model Chat {
  id          Int      @id @default(autoincrement())
  senderId    Int
  sender      User     @relation("Sender", fields: [senderId], references: [id])
  recipientId Int
  recipient   User     @relation("Recipient", fields: [recipientId], references: [id])
  message     String
  createdAt   DateTime @default(now())

  @@index([senderId, recipientId]) 
}
